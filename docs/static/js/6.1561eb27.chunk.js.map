{"version":3,"sources":["../node_modules/monaco-editor/esm/vs/basic-languages/typescript/typescript.js","../node_modules/monaco-editor/esm/vs/basic-languages/javascript/javascript.js"],"names":["Object","defineProperty","__webpack_exports__","value","__webpack_require__","d","conf","language","_monaco","monaco","self","wordPattern","comments","lineComment","blockComment","brackets","onEnterRules","beforeText","afterText","action","indentAction","languages","IndentAction","IndentOutdent","appendText","None","removeText","autoClosingPairs","open","close","notIn","folding","markers","start","RegExp","end","defaultToken","tokenPostfix","keywords","typeKeywords","operators","symbols","escapes","digits","octaldigits","binarydigits","hexdigits","regexpctl","regexpesc","tokenizer","root","include","common","cases","@typeKeywords","@keywords","@default","token","bracket","next","@operators","whitespace","comment","jsdoc","regexp","regexrange","string_double","string_single","string_backtick","bracketCounting","__WEBPACK_IMPORTED_MODULE_0__typescript_typescript_js__"],"mappings":"uDAAAA,OAAAC,eAAAC,EAAA,cAAAC,OAAA,IAAAC,EAAAC,EAAAH,EAAA,yBAAAI,IAAAF,EAAAC,EAAAH,EAAA,6BAAAK,IAMA,IAAAC,EAAA,qBAAAC,OAAAC,KAAAD,cACOH,GACPK,YAAA,uFACAC,UACAC,YAAA,KACAC,cAAA,YAEAC,WACA,IAAW,MACX,UACA,UAEAC,eAGAC,WAAA,qCACAC,UAAA,YACAC,QAAqBC,aAAAZ,EAAAa,UAAAC,aAAAC,cAAAC,WAAA,SAIrBP,WAAA,qCACAE,QAAqBC,aAAAZ,EAAAa,UAAAC,aAAAG,KAAAD,WAAA,SAIrBP,WAAA,2CACAE,QAAqBC,aAAAZ,EAAAa,UAAAC,aAAAG,KAAAD,WAAA,QAIrBP,WAAA,0BACAE,QAAqBC,aAAAZ,EAAAa,UAAAC,aAAAG,KAAAC,WAAA,KAGrBC,mBACSC,KAAA,IAASC,MAAA,MACTD,KAAA,IAAAC,MAAA,MACAD,KAAA,IAAAC,MAAA,MACAD,KAAA,IAAAC,MAAA,IAAAC,OAAA,YACAF,KAAA,IAAAC,MAAA,IAAAC,OAAA,sBACAF,KAAA,IAAAC,MAAA,IAAAC,OAAA,sBACAF,KAAA,MAAAC,MAAA,MAAAC,OAAA,YAETC,SACAC,SACAC,MAAA,IAAAC,OAAA,0BACAC,IAAA,IAAAD,OAAA,gCAIO3B,GAEP6B,aAAA,UACAC,aAAA,MACAC,UACA,kEACA,kEACA,oEACA,uEACA,uEACA,sEACA,qEACA,qEACA,cAEAC,cACA,wDAEAC,WACA,kDACA,+CACA,gDACA,kDACA,UAGAC,QAAA,wBACAC,QAAA,wEACAC,OAAA,cACAC,YAAA,oBACAC,aAAA,oBACAC,UAAA,iCACAC,UAAA,yBACAC,UAAA,+EAEAC,WACAC,OACA,OAAiB,sBACJC,QAAA,WAEbC,SAEA,iBACAC,OACAC,gBAAA,UACAC,YAAA,UACAC,WAAA,iBAGA,mCAGaL,QAAA,gBAEb,gEAA8EM,MAAA,SAAAC,QAAA,QAAAC,KAAA,aAE9E,yBACA,iCACA,8BACA,YACAN,OACAO,aAAA,YACAJ,WAAA,OAIA,mDACA,8DACA,mCACA,wCACA,yCACA,uBAEA,QAAgB,cAEhB,qCACA,qCACA,gCACA,gCACA,kCAEAK,aACA,kBACA,wCACA,8BACA,sBAEAC,UACA,sBACA,0BACA,oBAEAC,QACA,0BACA,8BACA,wBAGAC,SACA,0BAAmC,2EACnC,4DAA2EP,MAAA,wBAAAE,KAAA,kBAC3E,wEACA,iCACA,uCACA,qBACA,+BACA,0BACA,oBAAkCF,MAAA,SAAAC,QAAA,SAAAC,KAAA,QAAmD,mBAErFM,aACA,8BACA,wBACA,+BACA,mBACA,MAAoBR,MAAA,wBAAAE,KAAA,OAAAD,QAAA,YAEpBQ,gBACA,qBACA,6BACA,gCACA,sBAEAC,gBACA,qBACA,6BACA,gCACA,sBAEAC,kBACA,QAAsBX,MAAA,oBAAAE,KAAA,sBACtB,sBACA,6BACA,gCACA,sBAEAU,kBACA,KAAgB,yCAChB,KAAgB,6BACHlB,QAAA,gDCnMbnD,OAAAC,eAAAC,EAAA,cAAAC,OAAA,IAAAC,EAAAC,EAAAH,EAAA,yBAAAI,IAAAF,EAAAC,EAAAH,EAAA,6BAAAK,IAAA,IAAA+D,EAAAlE,EAAA,MAQOE,GADP,qBAAAG,OAAAC,KAAAD,cACkB6D,EAAA,MACX/D,GAEP6B,aAAA,UACAC,aAAA,MACAC,UACA,kDACA,wDACA,6DACA,yDACA,+DACA,+DACA,sBAEAC,gBACAC,UAAe8B,EAAA,SAAU9B,UACzBC,QAAa6B,EAAA,SAAU7B,QACvBC,QAAa4B,EAAA,SAAU5B,QACvBC,OAAY2B,EAAA,SAAU3B,OACtBC,YAAiB0B,EAAA,SAAU1B,YAC3BC,aAAkByB,EAAA,SAAUzB,aAC5BC,UAAewB,EAAA,SAAUxB,UACzBC,UAAeuB,EAAA,SAAUvB,UACzBC,UAAesB,EAAA,SAAUtB,UACzBC,UAAeqB,EAAA,SAAUrB","file":"static/js/6.1561eb27.chunk.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n// Allow for running under nodejs/requirejs in tests\nvar _monaco = (typeof monaco === 'undefined' ? self.monaco : monaco);\nexport var conf = {\n    wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\@\\#\\%\\^\\&\\*\\(\\)\\-\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g,\n    comments: {\n        lineComment: '//',\n        blockComment: ['/*', '*/']\n    },\n    brackets: [\n        ['{', '}'],\n        ['[', ']'],\n        ['(', ')']\n    ],\n    onEnterRules: [\n        {\n            // e.g. /** | */\n            beforeText: /^\\s*\\/\\*\\*(?!\\/)([^\\*]|\\*(?!\\/))*$/,\n            afterText: /^\\s*\\*\\/$/,\n            action: { indentAction: _monaco.languages.IndentAction.IndentOutdent, appendText: ' * ' }\n        },\n        {\n            // e.g. /** ...|\n            beforeText: /^\\s*\\/\\*\\*(?!\\/)([^\\*]|\\*(?!\\/))*$/,\n            action: { indentAction: _monaco.languages.IndentAction.None, appendText: ' * ' }\n        },\n        {\n            // e.g.  * ...|\n            beforeText: /^(\\t|(\\ \\ ))*\\ \\*(\\ ([^\\*]|\\*(?!\\/))*)?$/,\n            action: { indentAction: _monaco.languages.IndentAction.None, appendText: '* ' }\n        },\n        {\n            // e.g.  */|\n            beforeText: /^(\\t|(\\ \\ ))*\\ \\*\\/\\s*$/,\n            action: { indentAction: _monaco.languages.IndentAction.None, removeText: 1 }\n        }\n    ],\n    autoClosingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"', notIn: ['string'] },\n        { open: '\\'', close: '\\'', notIn: ['string', 'comment'] },\n        { open: '`', close: '`', notIn: ['string', 'comment'] },\n        { open: \"/**\", close: \" */\", notIn: [\"string\"] }\n    ],\n    folding: {\n        markers: {\n            start: new RegExp(\"^\\\\s*//\\\\s*#?region\\\\b\"),\n            end: new RegExp(\"^\\\\s*//\\\\s*#?endregion\\\\b\")\n        }\n    }\n};\nexport var language = {\n    // Set defaultToken to invalid to see what you do not tokenize yet\n    defaultToken: 'invalid',\n    tokenPostfix: '.ts',\n    keywords: [\n        'abstract', 'as', 'break', 'case', 'catch', 'class', 'continue', 'const',\n        'constructor', 'debugger', 'declare', 'default', 'delete', 'do', 'else',\n        'enum', 'export', 'extends', 'false', 'finally', 'for', 'from', 'function',\n        'get', 'if', 'implements', 'import', 'in', 'infer', 'instanceof', 'interface',\n        'is', 'keyof', 'let', 'module', 'namespace', 'never', 'new', 'null', 'package',\n        'private', 'protected', 'public', 'readonly', 'require', 'global', 'return',\n        'set', 'static', 'super', 'switch', 'symbol', 'this', 'throw', 'true', 'try',\n        'type', 'typeof', 'unique', 'var', 'void', 'while', 'with', 'yield', 'async',\n        'await', 'of'\n    ],\n    typeKeywords: [\n        'any', 'boolean', 'number', 'object', 'string', 'undefined'\n    ],\n    operators: [\n        '<=', '>=', '==', '!=', '===', '!==', '=>', '+', '-', '**',\n        '*', '/', '%', '++', '--', '<<', '</', '>>', '>>>', '&',\n        '|', '^', '!', '~', '&&', '||', '?', ':', '=', '+=', '-=',\n        '*=', '**=', '/=', '%=', '<<=', '>>=', '>>>=', '&=', '|=',\n        '^=', '@',\n    ],\n    // we include these common regular expressions\n    symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n    escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n    digits: /\\d+(_+\\d+)*/,\n    octaldigits: /[0-7]+(_+[0-7]+)*/,\n    binarydigits: /[0-1]+(_+[0-1]+)*/,\n    hexdigits: /[[0-9a-fA-F]+(_+[0-9a-fA-F]+)*/,\n    regexpctl: /[(){}\\[\\]\\$\\^|\\-*+?\\.]/,\n    regexpesc: /\\\\(?:[bBdDfnrstvwWn0\\\\\\/]|@regexpctl|c[A-Z]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4})/,\n    // The main tokenizer for our languages\n    tokenizer: {\n        root: [\n            [/[{}]/, 'delimiter.bracket'],\n            { include: 'common' }\n        ],\n        common: [\n            // identifiers and keywords\n            [/[a-z_$][\\w$]*/, {\n                    cases: {\n                        '@typeKeywords': 'keyword',\n                        '@keywords': 'keyword',\n                        '@default': 'identifier'\n                    }\n                }],\n            [/[A-Z][\\w\\$]*/, 'type.identifier'],\n            // [/[A-Z][\\w\\$]*/, 'identifier'],\n            // whitespace\n            { include: '@whitespace' },\n            // regular expression: ensure it is terminated before beginning (otherwise it is an opeator)\n            [/\\/(?=([^\\\\\\/]|\\\\.)+\\/([gimsuy]*)(\\s*)(\\.|;|\\/|,|\\)|\\]|\\}|$))/, { token: 'regexp', bracket: '@open', next: '@regexp' }],\n            // delimiters and operators\n            [/[()\\[\\]]/, '@brackets'],\n            [/[<>](?!@symbols)/, '@brackets'],\n            [/!(?=([^=]|$))/, 'delimiter'],\n            [/@symbols/, {\n                    cases: {\n                        '@operators': 'delimiter',\n                        '@default': ''\n                    }\n                }],\n            // numbers\n            [/(@digits)[eE]([\\-+]?(@digits))?/, 'number.float'],\n            [/(@digits)\\.(@digits)([eE][\\-+]?(@digits))?/, 'number.float'],\n            [/0[xX](@hexdigits)/, 'number.hex'],\n            [/0[oO]?(@octaldigits)/, 'number.octal'],\n            [/0[bB](@binarydigits)/, 'number.binary'],\n            [/(@digits)/, 'number'],\n            // delimiter: after number because of .\\d floats\n            [/[;,.]/, 'delimiter'],\n            // strings\n            [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'],\n            [/'([^'\\\\]|\\\\.)*$/, 'string.invalid'],\n            [/\"/, 'string', '@string_double'],\n            [/'/, 'string', '@string_single'],\n            [/`/, 'string', '@string_backtick'],\n        ],\n        whitespace: [\n            [/[ \\t\\r\\n]+/, ''],\n            [/\\/\\*\\*(?!\\/)/, 'comment.doc', '@jsdoc'],\n            [/\\/\\*/, 'comment', '@comment'],\n            [/\\/\\/.*$/, 'comment'],\n        ],\n        comment: [\n            [/[^\\/*]+/, 'comment'],\n            [/\\*\\//, 'comment', '@pop'],\n            [/[\\/*]/, 'comment']\n        ],\n        jsdoc: [\n            [/[^\\/*]+/, 'comment.doc'],\n            [/\\*\\//, 'comment.doc', '@pop'],\n            [/[\\/*]/, 'comment.doc']\n        ],\n        // We match regular expression quite precisely\n        regexp: [\n            [/(\\{)(\\d+(?:,\\d*)?)(\\})/, ['regexp.escape.control', 'regexp.escape.control', 'regexp.escape.control']],\n            [/(\\[)(\\^?)(?=(?:[^\\]\\\\\\/]|\\\\.)+)/, ['regexp.escape.control', { token: 'regexp.escape.control', next: '@regexrange' }]],\n            [/(\\()(\\?:|\\?=|\\?!)/, ['regexp.escape.control', 'regexp.escape.control']],\n            [/[()]/, 'regexp.escape.control'],\n            [/@regexpctl/, 'regexp.escape.control'],\n            [/[^\\\\\\/]/, 'regexp'],\n            [/@regexpesc/, 'regexp.escape'],\n            [/\\\\\\./, 'regexp.invalid'],\n            [/(\\/)([gimsuy]*)/, [{ token: 'regexp', bracket: '@close', next: '@pop' }, 'keyword.other']],\n        ],\n        regexrange: [\n            [/-/, 'regexp.escape.control'],\n            [/\\^/, 'regexp.invalid'],\n            [/@regexpesc/, 'regexp.escape'],\n            [/[^\\]]/, 'regexp'],\n            [/\\]/, { token: 'regexp.escape.control', next: '@pop', bracket: '@close' }]\n        ],\n        string_double: [\n            [/[^\\\\\"]+/, 'string'],\n            [/@escapes/, 'string.escape'],\n            [/\\\\./, 'string.escape.invalid'],\n            [/\"/, 'string', '@pop']\n        ],\n        string_single: [\n            [/[^\\\\']+/, 'string'],\n            [/@escapes/, 'string.escape'],\n            [/\\\\./, 'string.escape.invalid'],\n            [/'/, 'string', '@pop']\n        ],\n        string_backtick: [\n            [/\\$\\{/, { token: 'delimiter.bracket', next: '@bracketCounting' }],\n            [/[^\\\\`$]+/, 'string'],\n            [/@escapes/, 'string.escape'],\n            [/\\\\./, 'string.escape.invalid'],\n            [/`/, 'string', '@pop']\n        ],\n        bracketCounting: [\n            [/\\{/, 'delimiter.bracket', '@bracketCounting'],\n            [/\\}/, 'delimiter.bracket', '@pop'],\n            { include: 'common' }\n        ],\n    },\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/monaco-editor/esm/vs/basic-languages/typescript/typescript.js\n// module id = 1472\n// module chunks = 6 10","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport { conf as tsConf, language as tsLanguage } from '../typescript/typescript.js';\n// Allow for running under nodejs/requirejs in tests\nvar _monaco = (typeof monaco === 'undefined' ? self.monaco : monaco);\nexport var conf = tsConf;\nexport var language = {\n    // Set defaultToken to invalid to see what you do not tokenize yet\n    defaultToken: 'invalid',\n    tokenPostfix: '.js',\n    keywords: [\n        'break', 'case', 'catch', 'class', 'continue', 'const',\n        'constructor', 'debugger', 'default', 'delete', 'do', 'else',\n        'export', 'extends', 'false', 'finally', 'for', 'from', 'function',\n        'get', 'if', 'import', 'in', 'instanceof', 'let', 'new', 'null',\n        'return', 'set', 'super', 'switch', 'symbol', 'this', 'throw', 'true',\n        'try', 'typeof', 'undefined', 'var', 'void', 'while', 'with', 'yield',\n        'async', 'await', 'of'\n    ],\n    typeKeywords: [],\n    operators: tsLanguage.operators,\n    symbols: tsLanguage.symbols,\n    escapes: tsLanguage.escapes,\n    digits: tsLanguage.digits,\n    octaldigits: tsLanguage.octaldigits,\n    binarydigits: tsLanguage.binarydigits,\n    hexdigits: tsLanguage.hexdigits,\n    regexpctl: tsLanguage.regexpctl,\n    regexpesc: tsLanguage.regexpesc,\n    tokenizer: tsLanguage.tokenizer,\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/monaco-editor/esm/vs/basic-languages/javascript/javascript.js\n// module id = 1489\n// module chunks = 6"],"sourceRoot":""}